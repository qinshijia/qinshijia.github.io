<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>博客搭建过程</title>
      <link href="/2018/08/09/build-blog/"/>
      <url>/2018/08/09/build-blog/</url>
      <content type="html"><![CDATA[<p>记录一下博客网站的搭建过程，使用 Github 提供的 GitHub Pages + Hexo 实现。GitHub Pages 是 GitHub 提供的静态网页服务，文件存储在 GitHub 仓库中，可以结合 Jekyll、Hexo 等博客框架，快速的部署博客网站，同时还可以绑定个人域名，成为你的专属网站。Hexo 是一个快速、简洁且高效的博客框架，文档清晰，插件、主题丰富，使用 Makedown 解析文章，生成静态网页。使用 GitHub Pages + Hexo 即可快速部署漂亮的博客，让您专注博客内容。</p><p>博客的搭建过程参考了官方教程和一些网上的教程，“不重复造轮子”，我不再详细描写具体的配置过程，而是直接贴出教程的链接，方便查阅。</p><p>搭建过程主要以下几个步骤：</p><ul><li>建立 GitHub Pages 仓库</li><li>安装、部署 Hexo</li><li>配置主题</li><li>安装插件</li><li>编写博客</li></ul><p>在贴出的教程链接中，会有交叉的地方，请注意辨别。</p><h2 id="建立GitHub-Pages仓库"><a href="#建立GitHub-Pages仓库" class="headerlink" title="建立GitHub Pages仓库"></a>建立GitHub Pages仓库</h2><p>建立 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 仓库，首先要有 GitHub 账号，然后在 GitHub 上建立一个命名为 [你GitHub用户名].github.io的私有仓库。需要注意的是，仓库的命名必须为你GitHub的用户名，否则将不生效，就不能通过 <code>https://[你GitHub用户名].github.io</code> 来访问。</p><p>官方教程点击<a href="https://pages.github.com/" target="_blank" rel="noopener">这里</a>。</p><p>建好仓库之后，在仓库里面上传一个 <code>index.html</code> 文件，然后通过 <code>https://[你GitHub用户名].github.io</code> 来访问，可以看到<code>index.html</code>的内容，就说明已经建立好。上传后直接访问可能会出现404，等几分钟就好了。确认仓库已经建好，用来测试的 <code>index.html</code> 文件就可以删除了。</p><p>在搭建博客、编写博客的过程中，基本都用不上 Git 命令，但博客是基于 GitHub 的仓库实现的，还是推荐了解一下 Git 命令，方便解决各种问题。这里推荐一个简单清晰的git教程,点击<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">这里</a>。</p><h2 id="安装、部署Hexo"><a href="#安装、部署Hexo" class="headerlink" title="安装、部署Hexo"></a>安装、部署Hexo</h2><p>Hexo 是基于 node.js 实现的，所以需要在自己电脑上安装 node.js，Hexo 没有可视化界面，需要使用命令行来完成各种功能，为了便于使用命令行，所以还要安装 Fit Bash。有了 node.js 和 Git Bash 之后，就可以愉快的在上面敲命令行安装、部署 Hexo 了。</p><p>安装的方法官方教程里都有，点击<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">这里</a>，官方教程比较全面，也会比较繁琐。</p><p>还有一个比较简单的教程，点击<a href="http://visugar.com/2017/05/04/20170504SetUpHexoBlog/" target="_blank" rel="noopener">这里</a>，里面还会教你怎么新建 GitHub 仓库，可以直接跳过，使用上面建好的就可以了。</p><p>到这里，部署 Hexo，并发布到 GitHub 仓库之后，博客就已经搭建完了。</p><p>不过，你可能还不太满意，界面不漂亮、没有站内搜索、没有RSS…</p><p>界面不漂亮？换个主题吧。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>好看的主题都在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>，点击进去预览，然后根据主题的配置方法配置即可。</p><p>我使用的主题是 <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>，大道至简，里面有详细的配置方法，按需配置即可。</p><p>本地配置好之后，使用 Hexo 发布命令 <code>hexo deploy</code>，就可以在 <code>https://[你GitHub用户名].github.io</code> 上看到效果。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>想要站内搜索，推荐这个插件：<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p><p>想要RSS，推荐这个插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></p><p>还想安装其他的？都在<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">这里</a>。</p><p>漂亮的博客网站已经建好了，开始书写内容吧。</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>Hexo 是将 Markdown 文件解析为静态网页，所以博客也需要使用 Markdown 格式书写。Markdown 的目标是实现「易读易写」，所以使用起来很简单，这里是<a href="http://www.markdown.cn/" target="_blank" rel="noopener">官方教程</a>。</p><p>Markdown 的编辑器有很多，我使用的是 Atom，加上下面这些插件，即可方便的书写博客。</p><ul><li>markdown-writer：高亮显 示Markdown</li><li>markdown-scroll-sync：编写的时候按了 <code>Ctrl + Shift + M</code>，之后能同步滚动预览</li><li>markdown-image-assistant：截图之后直接按 <code>Ctrl + V</code> 粘贴</li></ul><p>在 Atom 的 <code>File</code> -&gt; <code>settings</code> -&gt; <code>install</code>中搜索响应插件然后安装即可，使用方法在搜索结果界面点进去都有介绍。</p><p>好了，专注内容吧。</p>]]></content>
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter之HTTP请求</title>
      <link href="/2018/08/06/flutter-http/"/>
      <url>/2018/08/06/flutter-http/</url>
      <content type="html"><![CDATA[<p>APP开发或多或少都要用到http网络请求，在Flutter中http请求的使用方式非常简单，只需在引入http库，设置url等必要参数后，调用<code>http.get()</code>或者<code>http.post()</code>方法即可。</p><h2 id="Get方式请求"><a href="#Get方式请求" class="headerlink" title="Get方式请求"></a>Get方式请求</h2><p>首先需要在 pubspec.yaml 中添加依赖：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dependencies</span>:</span><br><span class="line">  ...</span><br><span class="line">  <span class="attribute">http</span>: <span class="string">'&gt;=0.11.3+16'</span></span><br></pre></td></tr></table></figure><p>然后调用http.get()方法即可：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line">[...]</span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dataURL = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">    http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"response body : <span class="subst">$&#123;response.body&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置http请求头 header：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">  Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">  http.Response response = await http.<span class="built_in">get</span>(dataUrl, headers: <span class="built_in">map</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求成功后刷新界面：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">  Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">  http.Response response = await http.<span class="built_in">get</span>(dataUrl, headers: <span class="built_in">map</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解析数据</span></span><br><span class="line">  BookResponse baseResponse = <span class="keyword">new</span> BookResponse(response.body);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通知界面更新状态，刷新界面</span></span><br><span class="line">  setState(() &#123;</span><br><span class="line">      _books = baseResponse.data;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Post方式请求"><a href="#Post方式请求" class="headerlink" title="Post方式请求"></a>Post方式请求</h2><p>将get方式中的http.get() 方法改为 http.post() 方法，并添加参数body即可：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _postData(Book book) async &#123;</span><br><span class="line">    <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">    <span class="built_in">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Post方式</span></span><br><span class="line">      http.Response response = await http.post(dataUrl, headers: <span class="built_in">map</span>, body: json.encode(book));</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line">    &#125; on Exception <span class="built_in">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"exception $e"</span>);</span><br><span class="line">      SnackBar mSnackBar = <span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"上传数据错误"</span>));</span><br><span class="line">      Scaffold.of(context).showSnackBar(mSnackBar);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多用法参考<a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noopener">官方示例</a></p>]]></content>
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter之扫盲篇</title>
      <link href="/2018/08/06/flutter-intruduction/"/>
      <url>/2018/08/06/flutter-intruduction/</url>
      <content type="html"><![CDATA[<h2 id="什么是Flutter"><a href="#什么是Flutter" class="headerlink" title="什么是Flutter"></a>什么是Flutter</h2><p>Flutter是Google推出的跨平台SDK，同一份代码即可在Android和IOS系统上运行，使用Dart作为开发语言。2018年6月Flutter发布了首个预览版，到目前为止正式版本还未发布。Flutter是在GitHub上开源，SDK代码和相关支持库也在不断更新中，可以持续关注。</p><p>官方简介：</p><blockquote><p>Flutter 是 Google 用以帮助开发者在 iOS 和 Android 两个平台开发高质量原生 UI 的移动 SDK。Flutter 兼容现有的代码，免费且开源，在全球开发者中广泛被使用。</p></blockquote><p>Flutter拥有以下特点：</p><blockquote><ul><li><strong>快速开发</strong>：Flutter的热重载可以快速地进行测试、构建UI、添加功能并更快地修复错误。</li><li><strong>富有表现力，漂亮的用户界面</strong>：自带的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果。</li><li><strong>响应式框架</strong>：使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。</li><li><strong>访问本地功能和SDK</strong>：Flutter可以复用现有的Java、Swift或ObjC代码，访问iOS和Android上的原生系统功能和系统SDK。</li><li><strong>统一的应用开发体验</strong>：Flutter拥有丰富的工具和库，可以帮助开发者轻松地同时在iOS和Android系统中实现想法和创意。</li><li><strong>原生性能</strong>：Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li></ul></blockquote><h2 id="Flutter和React-Native有什么区别？"><a href="#Flutter和React-Native有什么区别？" class="headerlink" title="Flutter和React Native有什么区别？"></a>Flutter和React Native有什么区别？</h2><p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，目前支持iOS和安卓两大平台，使用JavaScript语言开发。相较于Flutter，RN发展更早，使用的人数更多，第三方库也更加丰富。但是在使用RN时，需要编写一些桥接代码，不能完全实现跨平台。加上Facebook使用的开源许可证可能带来的法律风险，AirBnb、阿里巴巴和百度等大公司也相继宣布不再采用RN。</p><p>Flutter在跨平台方面做得会更加彻底，例如RN的UI组件最终都会转化为原生UI组件，而Flutter是自己实现，直接丢弃了原生UI组件，因此在各个平台上的表现一致性更高。Flutter在调用系统服务时，仍然需要根据平台配置，也不能完全做到平台无关。目前和RN相比较，Flutter并没有太大优势，不过Flutter还很年轻，Google与及广大开发者一起不断的维护和更新中。有消息称，Flutter作为Google开发的全新系统Fuchsia的开发框架，未来可期。</p><p>Flutter和RN的对比图：<br><img src="https://www.mindinventory.com/blog/wp-content/uploads/2018/05/flutter-react-native-comparison.jpg" alt=""></p><h2 id="Flutter怎么用？"><a href="#Flutter怎么用？" class="headerlink" title="Flutter怎么用？"></a>Flutter怎么用？</h2><p>Flutter官网文档很全面，从入门到精通看 <a href="https://flutter.io/" target="_blank" rel="noopener">这里</a> 就够了。</p><h3 id="Flutter初体验"><a href="#Flutter初体验" class="headerlink" title="Flutter初体验"></a>Flutter初体验</h3><ol><li>安装环境</li></ol><p>在Android Studio中安装插件<code>Flutter</code>和<code>Dart</code>，安装完成后重启Android Studio即可使用Flutter。<br><img src="images/beb787b6-5aa1-4083-8da0-68fe95091b09.png" alt=""></p><ol start="2"><li>创建Flutter工程并运行</li></ol><p>创建Flutter工程与创建Android工程方式一样，选择<code>File &gt;New Flutter Project</code>，按照指引创建，运行则点击运行图标。<br><img src="images/2ee80568-b9de-421e-a613-0c31c285d28d.png" alt=""></p><ol start="3"><li>Flutter热重载</li></ol><p>修改代码后保存即可在手机上看到修改后的效果。<br><img src="https://flutter.io/images/intellij/hot-reload.gif" alt="Flutter热重载"></p><h3 id="Flutter组件简介"><a href="#Flutter组件简介" class="headerlink" title="Flutter组件简介"></a>Flutter组件简介</h3><p>一切皆组件。</p><p>组件(Widget)是构建Flutter UI的基础。在Flutter中，组件是响应式的，描述了当前状态下该界面显示位置和内容，当组件的状态发生变化时会重建(rebuild)。组件分为有状态组件(StatefulWidget)和无状态组件(StatelessWidget)。有状态组件是指有可能会发生变化的组件，例如显示的内容、位置发生变化。无状态组件是指显示之后就不会发生变化。</p><p>Flutter 版Hello World：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  runApp(</span><br><span class="line">    <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">'Hello, world!'</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Flutter 应用最小的代码结构，<code>runApp()</code>是Flutter应用的入口，需要传入一个组件。<code>Center</code>和<code>Text</code>都是一个组件，描述了界面显示的位置和内容。</p><p>Flutter 版计数器：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="keyword">new</span> <span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">'Flutter</span> <span class="type">Demo</span>',</span><br><span class="line">      theme: <span class="keyword">new</span> <span class="type">ThemeData</span>(</span><br><span class="line">        primarySwatch: <span class="type">Colors</span>.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> <span class="type">MyHomePage</span>(title: <span class="symbol">'Flutter</span> <span class="type">Demo</span> <span class="type">Home</span> <span class="type">Page</span>'),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="type">MyHomePage</span>(&#123;<span class="type">Key</span> key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; <span class="keyword">new</span> _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> </span>&#123;</span><br><span class="line">  int _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  void _incrementCounter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新组件状态，刷新界面</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="keyword">new</span> <span class="type">AppBar</span>(</span><br><span class="line">        title: <span class="keyword">new</span> <span class="type">Text</span>(widget.title),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//界面内容</span></span><br><span class="line">      body: <span class="keyword">new</span> <span class="type">Center</span>(</span><br><span class="line">        child: <span class="keyword">new</span> <span class="type">Column</span>(</span><br><span class="line">          mainAxisAlignment: <span class="type">MainAxisAlignment</span>.center,</span><br><span class="line">          children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">            <span class="keyword">new</span> <span class="type">Text</span>(</span><br><span class="line">              <span class="symbol">'You</span> have pushed the button <span class="keyword">this</span> many times:',</span><br><span class="line">            ),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//显示当前计数器的值</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">Text</span>(</span><br><span class="line">              '$_counter',</span><br><span class="line">              style: <span class="type">Theme</span>.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//点击浮动按钮递增</span></span><br><span class="line">      floatingActionButton: <span class="keyword">new</span> <span class="type">FloatingActionButton</span>(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="symbol">'Incremen</span>t',</span><br><span class="line">        child: <span class="keyword">new</span> <span class="type">Icon</span>(<span class="type">Icons</span>.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中的<code>MyHomePage</code>是有状态的组件，会动态刷新页面中间的数字。点击一次浮动按钮<code>floatingActionButton</code>时，会触发<code>onPressed</code>事件执行<code>_incrementCounter</code>方法，在<code>_incrementCounter</code>方法中，计数器加1，并调用有状态组件的<code>setState</code>方法，刷新组件显示的内容。</p><p>运行的截图如下：</p><p><img src="images/6eded676-e66c-4d13-a8d6-a523915d257d.jpg" alt=""></p><h3 id="Flutter与Android原生开发的区别？"><a href="#Flutter与Android原生开发的区别？" class="headerlink" title="Flutter与Android原生开发的区别？"></a>Flutter与Android原生开发的区别？</h3><p>本节主要参考官方文档<a href="https://flutter.io/flutter-for-android/" target="_blank" rel="noopener">Flutter for Android Developers</a></p><p>1.Flutter中有<code>View</code>吗？</p><p>在Android里，<code>View</code>是屏幕上显示的基础，Flutter与之类似的是组件<code>widget</code>。在Flutter中没有XML的布局文件，而是在代码中编写组件树<code>widget tree</code>来完成界面布局。当界面中显示的内容有变化时，通过更新有状态组件<code>StatefulWidget</code>的<code>State</code>来刷新界面。</p><p>2.Activity 和 Fragment 呢？</p><p>一切皆组件，Activity和Fragment在Flutter里面也属于组件<code>widget</code>的范畴。组件的生命周期里有初始化、状态改变、销毁这三种状态。<br><img src="https://segmentfault.com/img/bVbbYQc?w=499&amp;h=712" alt=""></p><p>在Flutter中弱化了生命周期的概念，<a href="https://flutter.io/flutter-for-android/#how-do-i-listen-to-android-activity-lifecycle-events" target="_blank" rel="noopener">文档</a>中写道：</p><blockquote><p>If you need to observe the lifecycle to acquire or release any native resources, you should likely be doing it from the native side, at any rate.</p></blockquote><p>3.没有Activity，怎么跳转页面？</p><p>Flutter 没有 <code>Intent</code>,可以通过<code>Navigator</code>和<code>Route</code>来实现页面间的跳转。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    home: <span class="keyword">new</span> MyAppHome(), <span class="regexp">//</span> becomes the route named <span class="string">'/'</span></span><br><span class="line">    routes: &lt;String, WidgetBuilder&gt; &#123;</span><br><span class="line">      <span class="string">'/a'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page A'</span>),</span><br><span class="line">      <span class="string">'/b'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page B'</span>),</span><br><span class="line">      <span class="string">'/c'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page C'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>跳转页面</span><br><span class="line">Navigator.<span class="keyword">of</span>(context).pushNamed(<span class="string">'/b'</span>);</span><br></pre></td></tr></table></figure></p><p>4.怎么使用相机、GPS之类的功能？</p><p>使用Flutter插件(plugins)，也就是通过第三方库来使用这些功能。Flutter的第三方库都可以在<a href="https://pub.dartlang.org/packages" target="_blank" rel="noopener">这里</a>搜索。</p><p>5.怎么切换主线程和后台线程？</p><p>Flutter默认在主线程上运行，访问网络等需要异步线程的，则使用<code>async</code>和<code>await</code>,例如下面这个请求网络并刷新界面的例子：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="built_in">String</span> dataURL = <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>;</span><br><span class="line">  http.<span class="built_in">Response</span> <span class="built_in">response</span> = await http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    widgets = json.decode(<span class="built_in">response</span>.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.mindinventory.com/blog/flutter-vs-react-native/" target="_blank" rel="noopener">Flutter Vs. React Native: Let’s See Who the Winner is</a></p><p><a href="http://szuwest.github.io/flutterkuang-jia-yan-jiu-he-yu-rndui-bi.html" target="_blank" rel="noopener">Flutter框架研究和与RN对比</a></p><p><a href="https://juejin.im/post/5afd77466fb9a07aab2a12da" target="_blank" rel="noopener">Flutter - 不一样的跨平台解决方案</a></p><p><a href="https://flutter.io/technical-overview/#everythings-a-widget" target="_blank" rel="noopener">Flutter Technical Overview</a></p><p><a href="https://segmentfault.com/a/1190000015211309" target="_blank" rel="noopener">flutter中的生命周期</a></p>]]></content>
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>

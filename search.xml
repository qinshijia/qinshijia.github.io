<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客搭建过程]]></title>
    <url>%2F2018%2F08%2F09%2Fbuild-blog%2F</url>
    <content type="text"><![CDATA[记录一下博客网站的搭建过程，使用 Github 提供的 GitHub Pages + Hexo 实现。GitHub Pages 是 GitHub 提供的静态网页服务，文件存储在 GitHub 仓库中，可以结合 Jekyll、Hexo 等博客框架，快速的部署博客网站，同时还可以绑定个人域名，成为你的专属网站。Hexo 是一个快速、简洁且高效的博客框架，文档清晰，插件、主题丰富，使用 Makedown 解析文章，生成静态网页。使用 GitHub Pages + Hexo 即可快速部署漂亮的博客，让您专注博客内容。 博客的搭建过程参考了官方教程和一些网上的教程，“不重复造轮子”，我不再详细描写具体的配置过程，而是直接贴出教程的链接，方便查阅。 搭建过程主要以下几个步骤： 建立 GitHub Pages 仓库 安装、部署 Hexo 配置主题 安装插件 编写博客 在贴出的教程链接中，会有交叉的地方，请注意辨别。 建立GitHub Pages仓库建立 GitHub Pages 仓库，首先要有 GitHub 账号，然后在 GitHub 上建立一个命名为 [你GitHub用户名].github.io的私有仓库。需要注意的是，仓库的命名必须为你GitHub的用户名，否则将不生效，就不能通过 https://[你GitHub用户名].github.io 来访问。 官方教程点击这里。 建好仓库之后，在仓库里面上传一个 index.html 文件，然后通过 https://[你GitHub用户名].github.io 来访问，可以看到index.html的内容，就说明已经建立好。上传后直接访问可能会出现404，等几分钟就好了。确认仓库已经建好，用来测试的 index.html 文件就可以删除了。 在搭建博客、编写博客的过程中，基本都用不上 Git 命令，但博客是基于 GitHub 的仓库实现的，还是推荐了解一下 Git 命令，方便解决各种问题。这里推荐一个简单清晰的git教程,点击这里。 安装、部署HexoHexo 是基于 node.js 实现的，所以需要在自己电脑上安装 node.js，Hexo 没有可视化界面，需要使用命令行来完成各种功能，为了便于使用命令行，所以还要安装 Fit Bash。有了 node.js 和 Git Bash 之后，就可以愉快的在上面敲命令行安装、部署 Hexo 了。 安装的方法官方教程里都有，点击这里，官方教程比较全面，也会比较繁琐。 还有一个比较简单的教程，点击这里，里面还会教你怎么新建 GitHub 仓库，可以直接跳过，使用上面建好的就可以了。 到这里，部署 Hexo，并发布到 GitHub 仓库之后，博客就已经搭建完了。 不过，你可能还不太满意，界面不漂亮、没有站内搜索、没有RSS… 界面不漂亮？换个主题吧。 配置主题好看的主题都在这里，点击进去预览，然后根据主题的配置方法配置即可。 我使用的主题是 maupassant，大道至简，里面有详细的配置方法，按需配置即可。 本地配置好之后，使用 Hexo 发布命令 hexo deploy，就可以在 https://[你GitHub用户名].github.io 上看到效果。 安装插件想要站内搜索，推荐这个插件：hexo-generator-search 想要RSS，推荐这个插件：hexo-generator-feed 还想安装其他的？都在这里。 漂亮的博客网站已经建好了，开始书写内容吧。 编写博客Hexo 是将 Markdown 文件解析为静态网页，所以博客也需要使用 Markdown 格式书写。Markdown 的目标是实现「易读易写」，所以使用起来很简单，这里是官方教程。 Markdown 的编辑器有很多，我使用的是 Atom，加上下面这些插件，即可方便的书写博客。 markdown-writer：高亮显 示Markdown markdown-scroll-sync：编写的时候按了 Ctrl + Shift + M，之后能同步滚动预览 markdown-image-assistant：截图之后直接按 Ctrl + V 粘贴 在 Atom 的 File -&gt; settings -&gt; install中搜索响应插件然后安装即可，使用方法在搜索结果界面点进去都有介绍。 好了，专注内容吧。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter之HTTP请求]]></title>
    <url>%2F2018%2F08%2F06%2Fflutter-http%2F</url>
    <content type="text"><![CDATA[APP开发或多或少都要用到http网络请求，在Flutter中http请求的使用方式非常简单，只需在引入http库，设置url等必要参数后，调用http.get()或者http.post()方法即可。 Get方式请求首先需要在 pubspec.yaml 中添加依赖： 123dependencies: ... http: '&gt;=0.11.3+16' 然后调用http.get()方法即可：12345678import 'package:http/http.dart' as http;[...] loadData() async &#123; String dataURL = "https://api.bmob.cn/1/classes/book/"; http.Response response = await http.get(dataURL); print("response body : $&#123;response.body&#125;"); &#125;&#125; 设置http请求头 header：123456789loadData() async &#123; String dataUrl = "https://api.bmob.cn/1/classes/book/"; Map&lt;String, String&gt; map = new Map(); map["Content-Type"] = "application/json"; map["X-Bmob-Application-Id"] = "ce30565639d0fb10cd925b5b024c3408"; map["X-Bmob-REST-API-Key"] = "4057ff07b1bec5590fb4ff0a16141938"; http.Response response = await http.get(dataUrl, headers: map); print("$&#123;response.body&#125;");&#125; 请求成功后刷新界面：1234567891011121314151617loadData() async &#123; String dataUrl = "https://api.bmob.cn/1/classes/book/"; Map&lt;String, String&gt; map = new Map(); map["Content-Type"] = "application/json"; map["X-Bmob-Application-Id"] = "ce30565639d0fb10cd925b5b024c3408"; map["X-Bmob-REST-API-Key"] = "4057ff07b1bec5590fb4ff0a16141938"; http.Response response = await http.get(dataUrl, headers: map); print("$&#123;response.body&#125;"); //解析数据 BookResponse baseResponse = new BookResponse(response.body); //通知界面更新状态，刷新界面 setState(() &#123; _books = baseResponse.data; &#125;);&#125; Post方式请求将get方式中的http.get() 方法改为 http.post() 方法，并添加参数body即可：12345678910111213141516171819void _postData(Book book) async &#123; String dataUrl = "https://api.bmob.cn/1/classes/book/"; //设置请求头 Map&lt;String, String&gt; map = new Map(); map["Content-Type"] = "application/json"; map["X-Bmob-Application-Id"] = "ce30565639d0fb10cd925b5b024c3408"; map["X-Bmob-REST-API-Key"] = "4057ff07b1bec5590fb4ff0a16141938"; try &#123; //使用Post方式 http.Response response = await http.post(dataUrl, headers: map, body: json.encode(book)); print("$&#123;response.body&#125;"); &#125; on Exception catch (e) &#123; print("exception $e"); SnackBar mSnackBar = new SnackBar(content: new Text("上传数据错误")); Scaffold.of(context).showSnackBar(mSnackBar); &#125;&#125; 更多用法参考官方示例]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flutter之扫盲篇]]></title>
    <url>%2F2018%2F08%2F06%2Fflutter-intruduction%2F</url>
    <content type="text"><![CDATA[什么是FlutterFlutter是Google推出的跨平台SDK，同一份代码即可在Android和IOS系统上运行，使用Dart作为开发语言。2018年6月Flutter发布了首个预览版，到目前为止正式版本还未发布。Flutter是在GitHub上开源，SDK代码和相关支持库也在不断更新中，可以持续关注。 官方简介： Flutter 是 Google 用以帮助开发者在 iOS 和 Android 两个平台开发高质量原生 UI 的移动 SDK。Flutter 兼容现有的代码，免费且开源，在全球开发者中广泛被使用。 Flutter拥有以下特点： 快速开发：Flutter的热重载可以快速地进行测试、构建UI、添加功能并更快地修复错误。 富有表现力，漂亮的用户界面：自带的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果。 响应式框架：使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。 访问本地功能和SDK：Flutter可以复用现有的Java、Swift或ObjC代码，访问iOS和Android上的原生系统功能和系统SDK。 统一的应用开发体验：Flutter拥有丰富的工具和库，可以帮助开发者轻松地同时在iOS和Android系统中实现想法和创意。 原生性能：Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。 Flutter和React Native有什么区别？React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，目前支持iOS和安卓两大平台，使用JavaScript语言开发。相较于Flutter，RN发展更早，使用的人数更多，第三方库也更加丰富。但是在使用RN时，需要编写一些桥接代码，不能完全实现跨平台。加上Facebook使用的开源许可证可能带来的法律风险，AirBnb、阿里巴巴和百度等大公司也相继宣布不再采用RN。 Flutter在跨平台方面做得会更加彻底，例如RN的UI组件最终都会转化为原生UI组件，而Flutter是自己实现，直接丢弃了原生UI组件，因此在各个平台上的表现一致性更高。Flutter在调用系统服务时，仍然需要根据平台配置，也不能完全做到平台无关。目前和RN相比较，Flutter并没有太大优势，不过Flutter还很年轻，Google与及广大开发者一起不断的维护和更新中。有消息称，Flutter作为Google开发的全新系统Fuchsia的开发框架，未来可期。 Flutter和RN的对比图： Flutter怎么用？Flutter官网文档很全面，从入门到精通看 这里 就够了。 Flutter初体验 安装环境 在Android Studio中安装插件Flutter和Dart，安装完成后重启Android Studio即可使用Flutter。 创建Flutter工程并运行 创建Flutter工程与创建Android工程方式一样，选择File &gt;New Flutter Project，按照指引创建，运行则点击运行图标。 Flutter热重载 修改代码后保存即可在手机上看到修改后的效果。 Flutter组件简介一切皆组件。 组件(Widget)是构建Flutter UI的基础。在Flutter中，组件是响应式的，描述了当前状态下该界面显示位置和内容，当组件的状态发生变化时会重建(rebuild)。组件分为有状态组件(StatefulWidget)和无状态组件(StatelessWidget)。有状态组件是指有可能会发生变化的组件，例如显示的内容、位置发生变化。无状态组件是指显示之后就不会发生变化。 Flutter 版Hello World： 123456789101112import 'package:flutter/material.dart';void main() &#123; runApp( new Center( child: new Text( 'Hello, world!', textDirection: TextDirection.ltr, ), ), );&#125; 这是Flutter 应用最小的代码结构，runApp()是Flutter应用的入口，需要传入一个组件。Center和Text都是一个组件，描述了界面显示的位置和内容。 Flutter 版计数器：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Flutter Demo', theme: new ThemeData( primarySwatch: Colors.blue, ), home: new MyHomePage(title: 'Flutter Demo Home Page'), ); &#125;&#125;//有状态组件class MyHomePage extends StatefulWidget &#123; MyHomePage(&#123;Key key, this.title&#125;) : super(key: key); final String title; @override _MyHomePageState createState() =&gt; new _MyHomePageState();&#125;class _MyHomePageState extends State&lt;MyHomePage&gt; &#123; int _counter = 0; void _incrementCounter() &#123; //更新组件状态，刷新界面 setState(() &#123; _counter++; &#125;); &#125; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar( title: new Text(widget.title), ), //界面内容 body: new Center( child: new Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ new Text( 'You have pushed the button this many times:', ), //显示当前计数器的值 new Text( '$_counter', style: Theme.of(context).textTheme.display1, ), ], ), ), //点击浮动按钮递增 floatingActionButton: new FloatingActionButton( onPressed: _incrementCounter, tooltip: 'Increment', child: new Icon(Icons.add), ), ); &#125;&#125; 这段代码中的MyHomePage是有状态的组件，会动态刷新页面中间的数字。点击一次浮动按钮floatingActionButton时，会触发onPressed事件执行_incrementCounter方法，在_incrementCounter方法中，计数器加1，并调用有状态组件的setState方法，刷新组件显示的内容。 运行的截图如下： Flutter与Android原生开发的区别？本节主要参考官方文档Flutter for Android Developers 1.Flutter中有View吗？ 在Android里，View是屏幕上显示的基础，Flutter与之类似的是组件widget。在Flutter中没有XML的布局文件，而是在代码中编写组件树widget tree来完成界面布局。当界面中显示的内容有变化时，通过更新有状态组件StatefulWidget的State来刷新界面。 2.Activity 和 Fragment 呢？ 一切皆组件，Activity和Fragment在Flutter里面也属于组件widget的范畴。组件的生命周期里有初始化、状态改变、销毁这三种状态。 在Flutter中弱化了生命周期的概念，文档中写道： If you need to observe the lifecycle to acquire or release any native resources, you should likely be doing it from the native side, at any rate. 3.没有Activity，怎么跳转页面？ Flutter 没有 Intent,可以通过Navigator和Route来实现页面间的跳转。12345678910111213void main() &#123; runApp(new MaterialApp( home: new MyAppHome(), // becomes the route named '/' routes: &lt;String, WidgetBuilder&gt; &#123; '/a': (BuildContext context) =&gt; new MyPage(title: 'page A'), '/b': (BuildContext context) =&gt; new MyPage(title: 'page B'), '/c': (BuildContext context) =&gt; new MyPage(title: 'page C'), &#125;, ));&#125;//跳转页面Navigator.of(context).pushNamed('/b'); 4.怎么使用相机、GPS之类的功能？ 使用Flutter插件(plugins)，也就是通过第三方库来使用这些功能。Flutter的第三方库都可以在这里搜索。 5.怎么切换主线程和后台线程？ Flutter默认在主线程上运行，访问网络等需要异步线程的，则使用async和await,例如下面这个请求网络并刷新界面的例子：1234567loadData() async &#123; String dataURL = "https://jsonplaceholder.typicode.com/posts"; http.Response response = await http.get(dataURL); setState(() &#123; widgets = json.decode(response.body); &#125;);&#125; 参考文档Flutter Vs. React Native: Let’s See Who the Winner is Flutter框架研究和与RN对比 Flutter - 不一样的跨平台解决方案 Flutter Technical Overview flutter中的生命周期]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RxJava debounce操作符防止界面刷新过度</title>
      <link href="/2018/10/25/rxjava-debounce/"/>
      <url>/2018/10/25/rxjava-debounce/</url>
      <content type="html"><![CDATA[<p>有些场景下APP需要根据数据实时刷新界面，数据刷新过快，界面跟着刷新可能会出现界面卡顿的问题。特别是在界面显示的元素比较多绘制时间比较长、刷新界面需要执行动画等情况下，就会导致界面卡顿。刷新过快的时候，中间的一些数据是可以过滤掉，只要根据最后一个数据刷新界面就可以了。</p><p>解决这个问题需要分为两个步骤：</p><ol><li>发射事件：收到数据时，使用同一个 <code>Observable</code> 发送更新事件</li><li>过滤事件：过滤发射频率过快的数据，处理最后一项即可</li></ol><h3 id="发射事件"><a href="#发射事件" class="headerlink" title="发射事件"></a>发射事件</h3><p>RxJava 发射事件的方式是通过 <code>subscriber.onNext()</code> ，每调用一次这个方法就会发射一个事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(subscriber -&gt; subscriber.onNext(<span class="string">"emit"</span>));</span><br></pre></td></tr></table></figure></p><p>将 <code>subscriber</code> 保存为一个全局变量，收到数据时调用<code>subscriber.onNext()</code>  即可发射事件通知刷新界面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Subscriber&lt;? <span class="keyword">super</span> Object&gt; mSubscribe;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUIObservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.create(subscriber -&gt; mSubscribe = subscriber)</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(i -&gt; Log.d(TAG,<span class="string">"refresh UI"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">receiveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSubscribe.onNext(<span class="string">"emit"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="过滤事件"><a href="#过滤事件" class="headerlink" title="过滤事件"></a>过滤事件</h3><p>通过RxJava的操作符 <code>debounce</code> 过滤掉发射速率过快的数据项，防止界面刷新频率过快。</p><blockquote><p><code>debounce</code> 产生一个新的 <code>Observable</code> ，这个 <code>Observable</code> 只发射原 <code>Observable</code> 中时间间隔小于指定阈值的最大子序列的最后一个元素。 参考资料：Debounce<a href="https://link.juejin.im/?target=http%3A%2F%2Freactivex.io%2Fdocumentation%2Foperators%2Fdebounce.html" target="_blank" rel="noopener">参考资料：Debounce</a></p></blockquote><p>通过例子看看 <code>debounce</code> 的实际作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">debounceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.interval(<span class="number">100</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">            .filter(i -&gt; i &lt; <span class="number">6</span>)</span><br><span class="line">            .doOnNext(i -&gt; Log.d(<span class="string">"RxJava"</span>, <span class="string">"emit num :"</span> + i)) <span class="comment">// 发射的数字</span></span><br><span class="line">            .debounce(<span class="number">300</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">            .subscribe(i -&gt; Log.d(<span class="string">"RxJava"</span>, <span class="string">"receive num :"</span> + i)); <span class="comment">// 接收到的数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出为：</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/164396/1540459205381-88ed9553-703e-4ab3-9f15-d19f7596dd6d.png" alt="image.png | left | 570x265"></p><p>这里例子中，每100ms发射一个数据，<code>debounce</code> 设置的时间阈值为300，这时 <code>subscribe</code> 只接收到了最后一个事件。</p><p>如果把 <code>interval</code> 的时间间隔改成500ms，<code>subscribe</code> 就可以接收到所有事件。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/164396/1540459464513-8975d733-87cb-4782-894c-b7a2f0483ccc.png" alt="image.png | left | 557x449"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>把发射事件和过滤事件结合到一起，即可解决因为数据等原因导致界面刷新过快的问题。整理之后的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Subscriber&lt;? <span class="keyword">super</span> Object&gt; mSubscribe;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化界面观察者</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUIObservable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Observable.create(subscriber -&gt; mSubscribe = subscriber)</span><br><span class="line">            .subscribeOn(Schedulers.io())</span><br><span class="line">            .debounce(<span class="number">300</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">            .subscribe(i -&gt; Log.d(TAG,<span class="string">"refresh UI"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到数据，通知刷新界面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">receiveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mSubscribe.onNext(<span class="string">"emit"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxJava 响应式编程</title>
      <link href="/2018/09/07/rxjava-intro/"/>
      <url>/2018/09/07/rxjava-intro/</url>
      <content type="html"><![CDATA[<h2 id="RxJava-是什么"><a href="#RxJava-是什么" class="headerlink" title="RxJava 是什么"></a>RxJava 是什么</h2><blockquote><p>a library for composing asynchronous and event-based programs using observable sequences for the Java VM.</p><p>一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库</p></blockquote><p>简单来说，RxJava是基于事件流的响应式编程，下面结合例子说明一下响应式编程是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init variables</span></span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init inputs</span></span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set output value</span></span><br><span class="line">k = i + j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update a dependent value</span></span><br><span class="line">j = <span class="number">4</span>;</span><br><span class="line">k = ?  <span class="comment">// What should k be?</span></span><br></pre></td></tr></table></figure><p>在上面这段代码中，<code>k = i + j</code> ，但是当 <code>j</code> 的值发生改变后，<code>k</code> 的值并不随 <code>j</code> 的改变而改变。而响应式编程就是一种能让 <code>k</code> 随着 <code>j</code> 的改变而改变的编程模式。传统的异步编程一般用回调函数的方式来完成更新操作，在遇到嵌套异步任务（例如嵌套的网络请求），往往会导致逻辑复杂、代码晦涩难懂、容易出现各种各样bug。多个层级的嵌套回调，很容易导致<a href="http://callbackhell.com/" target="_blank" rel="noopener">回调地狱</a>，响应式编程就能很好的解决这种问题。</p><h2 id="RxJava-的优点"><a href="#RxJava-的优点" class="headerlink" title="RxJava 的优点"></a>RxJava 的优点</h2><ul><li><strong>简单</strong>：能够轻松的应对异步任务、嵌套请求、嵌套回调的情况</li><li><strong>线程调度清晰</strong>：能轻松的指定任务执行的线程，两行代码就能实现后台执行耗时任务、前台显示的线程调度</li><li><strong>统一的错误处理</strong>：在嵌套的回调中往往需要在多处处理错误信息，RxJava只需在一个地方处理就可以</li><li><strong>减少不必要的中间状态变量</strong>：多个异步任务同时执行时，会需要一下中间状态变量（例如各种标志位）来控制执行的顺序，从而会导致各种奇怪的bug，而基于数据流的Rxjava则不需要这些变量，代码更加简洁，质量也会更高。</li></ul><h2 id="开始使用-RxJava"><a href="#开始使用-RxJava" class="headerlink" title="开始使用 RxJava"></a>开始使用 RxJava</h2><h3 id="RxJava-配置"><a href="#RxJava-配置" class="headerlink" title="RxJava 配置"></a>RxJava 配置</h3><p>首先需要添加配置导入RxJava 库 <code>app/build.gradle</code>:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="keyword">implementation</span> <span class="string">'io.reactivex:rxandroid:1.2.0'</span></span><br><span class="line">  <span class="keyword">implementation</span> <span class="string">'io.reactivex:rxjava:1.1.4'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用RxJava的时强烈推荐使用Lambda表达式，可以减少很多代码量。为简单起见，本文不使用Lambda表达式，可自行百度学习</p></blockquote><h3 id="被观察者与观察者"><a href="#被观察者与观察者" class="headerlink" title="被观察者与观察者"></a>被观察者与观察者</h3><p>RxJava是建立在被观察者和观察者两者的关系之上，观察者订阅被观察者后，被观察者一旦发生变化就会通知观察者。</p><p><code>observable</code> 表示被观察者，可以发射一系列事件。<code>observer</code> 是观察者，可以消耗 <code>observable</code> 发射出来的事件。当 <code>observer</code> 订阅  <code>observable</code> 后，<code>observable</code> 才开始发射事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext value："</span> + integer );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行以上代码，会打印如下信息：</span></span><br><span class="line"><span class="comment">// onNext value：1</span></span><br><span class="line"><span class="comment">// onNext value：2</span></span><br><span class="line"><span class="comment">// onNext value：3</span></span><br><span class="line"><span class="comment">// onCompleted</span></span><br></pre></td></tr></table></figure><p>以上代码中，被观察者 <code>Observables</code> 通过操作符 <code>just</code> 依次发射数据 <code>1,2,3</code> 。观察者 <code>Observer</code> 通过操作符 <code>subscribe</code> 订阅后，<code>observables</code> 开始发射数据， <code>Observer</code> 的 <code>onNext()</code> 方法就能接收并消耗掉数据，<code>observables</code> 发射结束后，就会收到             <code>onCompleted</code> 事件，整个过程结束。若这个过程中发生错误，就会收到 <code>onError</code> 事件，可在此处做同一的错误处理。</p><p><code>Observables</code> 常用的发射操作符还有：</p><ul><li><strong>from</strong>：将其它种类的对象和数据类型转换为Observable</li><li><strong>interval</strong>：创建一个按固定时间间隔发射整数序列的Observable</li><li><strong>repeat</strong>：创建一个发射特定数据重复多次的Observable</li><li><strong>timer</strong>：创建一个Observable，它在一个给定的延迟后发射一个特殊的值。</li></ul><p><code>Observer</code> 常用它的抽象类 <code>Subscriber</code> 代替，事实上 <code>Observer</code> 在订阅的时候也会先转化为 <code>Subscriber</code> ，下文将统一采用 <code>Subscriber</code> 。</p><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>默认情况下，RxJava 是在哪订阅就在哪发射事件和消耗事件，即：都是在调用 <code>subsribe()</code> 线程内执行。若需要切换线程，就要使用线程调度 <code>Scheduler</code> 。</p><p>线程调度使用到以下两个操作符：</p><ul><li>subscribeOn：指定<code>subscribe()</code>所发生的线程，即事件产生的线程，仅一次有效。</li><li>observeOn：指定<code>Subscriber</code>所运行在的线程，即事件消费的线程，可多次调用，达到多次切换线程的效果。</li></ul><p>线程调度的类型：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Schedulers.computation()</td><td style="text-align:left">计算型线程</td></tr><tr><td style="text-align:left">Schedulers.immediate()</td><td style="text-align:left">当前线程</td></tr><tr><td style="text-align:left">Schedulers.io()</td><td style="text-align:left">IO线程，网络、数据存取等</td></tr><tr><td style="text-align:left">Schedulers.newThread()</td><td style="text-align:left">新的线程</td></tr><tr><td style="text-align:left">AndroidSchedulers.mainThread()</td><td style="text-align:left">Android主线程</td></tr></tbody></table><p>其中Android主线程的参数 <code>AndroidScheduler.mainThread()</code><br>需要添加以下依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.reactivex:rxandroid:1.2.1'</span></span><br></pre></td></tr></table></figure></p><p>在上面的例子中加上 <code>subscribeOn(Schedulers.io()</code> 、 <code>observeOn(AndroidSchedulers.mainThread())</code> 两行代码，即可完成在后台执行耗时操作，在主线程更新界面的线程切换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io()) <span class="comment">// 在IO线程上调用，执行耗时操作</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 在主线程回调</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext value："</span> + integer );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行以上代码，会打印如下信息：</span></span><br><span class="line"><span class="comment">// onNext value：1</span></span><br><span class="line"><span class="comment">// onNext value：2</span></span><br><span class="line"><span class="comment">// onNext value：3</span></span><br><span class="line"><span class="comment">// onCompleted</span></span><br></pre></td></tr></table></figure><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>RxJava 是基于事件流的响应式编程，事件流的变化是其核心功能之一。<br>变换，就是对输入的事件进行加工处理后输出另一个事件。例如上面例子输入的事件是 <code>1</code> ，<code>2</code> ，<code>3</code> ，需要输出其对应的英文单词 <code>one</code> ，<code>two</code> ，<code>three</code> ，将 <code>1</code> 转为 <code>one</code> 的过程就叫做变换。</p><p>RxJava 常用的变换操作符有 <code>map</code> 和 <code>flatMap</code> 。</p><ul><li><strong>map</strong> ：对 <code>Observable</code> 发射的每一项数据应用一个函数，执行变换操作，然后返回一个发射这些结果的<code>Observable</code></li><li><strong>flatMap</strong>：将一个发射数据的 <code>Observable</code> 变换为多个（也可以是一个，只返回一个效果等同于map） <code>Observable</code> ，然后将它们发射的数据合并后放进一个单独的 <code>Observable</code> ，只需订阅最后一个<code>Observable</code> 即可。</li></ul><p>看不懂？没关系，接着往下看。</p><p>map 示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123; <span class="comment">// 将数字变换为英文字符串</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                String en = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">switch</span> (integer) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        en = <span class="string">"one"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        en = <span class="string">"two"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                        en = <span class="string">"three"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> en;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext value："</span> + word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行以上代码，会打印如下信息：</span></span><br><span class="line"><span class="comment">// onNext value：one</span></span><br><span class="line"><span class="comment">// onNext value：two</span></span><br><span class="line"><span class="comment">// onNext value：three</span></span><br><span class="line"><span class="comment">// onCompleted</span></span><br></pre></td></tr></table></figure></p><p>flatMap 示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"Hello world"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入的一个事件 “Hello world”,输入两个事件：“hello”和“world”</span></span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.from(s.split(<span class="string">" "</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onCompleted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"onNext value："</span> + word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 执行以上代码，会打印如下信息：</span></span><br><span class="line"><span class="comment">// onNext value：Hello</span></span><br><span class="line"><span class="comment">// onNext value：world</span></span><br><span class="line"><span class="comment">// onCompleted</span></span><br></pre></td></tr></table></figure></p><p>通过两个示例可以看出，<code>map</code> 操作符返回的是具体是事件（例子中返回的是String），<code>flatMap</code> 操作符返回的是<code>Observable</code>（例子中是返回Observable）。</p><h3 id="防止内存泄露"><a href="#防止内存泄露" class="headerlink" title="防止内存泄露"></a>防止内存泄露</h3><p>RxJava在订阅 <code>Observable</code> 时会保存一个引用，如果没有在合适的时机取消订阅，则可能会导致内存泄露。例如在Activity里执行网络请求，那么应该在 <code>onPause()</code> 中取消订阅。</p><p>取消订阅的方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅时返回 Subscription，可用于取消订阅</span></span><br><span class="line">Subscription subscription = Observable.just(<span class="number">1</span>).subscribe();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅前，先判断是否还是订阅状态</span></span><br><span class="line"><span class="keyword">if</span> (subscription != <span class="keyword">null</span> &amp;&amp; !subscription.isUnsubscribed()) &#123;</span><br><span class="line">    subscription.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三方库 <a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">RxLifecycle</a> 提供与Activity、Fragment生命周期相关的方法，自动取消订阅，能够有效的防止RxJava未取消订阅而导致的内存泄露。</p><h2 id="有用的库"><a href="#有用的库" class="headerlink" title="有用的库"></a>有用的库</h2><p>结合这些库使用，RxJava能变的更加强大。</p><ul><li><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a><strong>：</strong>http请求库</li><li><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">RxLifecycle</a>：根据Android生命周期管理RxJava</li><li><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="noopener">RxBinding</a>：对Android View事件的扩展，它使得你可以对View事件使用RxJava的各种操作</li><li><a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="noopener">RxPermissions</a>：RxJava的方式动态申请权限</li><li><a href="https://github.com/ReactiveX/RxAndroid/wiki#extensions" target="_blank" rel="noopener">更多的库…</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a></li><li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="noopener">ReactiveX/RxJava文档中文版</a></li><li><a href="https://guides.codepath.com/android/RxJava" target="_blank" rel="noopener">RxJava Intro</a></li></ul>]]></content>
      
      <categories>
          
          <category> RxJava </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MQTT--普遍用于物联网、消息推送的轻量级消息传输协议</title>
      <link href="/2018/09/01/mqtt-introduction/"/>
      <url>/2018/09/01/mqtt-introduction/</url>
      <content type="html"><![CDATA[<h2 id="MQTT是什么"><a href="#MQTT是什么" class="headerlink" title="MQTT是什么"></a>MQTT是什么</h2><p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。针对高延迟或不可靠的网络进行了优化，同时还确保了网络传输的可靠性。适合用于带宽小、内存小、处理能力有限、网络不可靠的环境。具有这些特点的MQTT很适合用于嵌入式设备，已普遍用于智能设备、医疗、智能汽车等领域。在Android、IOS等移动开发中，普遍作为消息推送的解决方案。</p><h2 id="MQTT有谁在用"><a href="#MQTT有谁在用" class="headerlink" title="MQTT有谁在用"></a>MQTT有谁在用</h2><ul><li><strong>阿里巴巴</strong> ：阿里云提供的IOT解决方案：<a href="https://www.aliyun.com/aliware/scenarios/case1" target="_blank" rel="noopener">https://www.aliyun.com/aliware/scenarios/case1</a></li><li><strong>Facebook Messenger</strong> ：Facebook出品的聊天工具</li><li><strong>EMQ</strong> ：百万级分布式开源物联网MQTT消息服务器：<a href="http://www.emqtt.com/" target="_blank" rel="noopener">http://www.emqtt.com/</a></li><li><strong>云智易</strong> ：云智易的设备是基于MQTT协议传输数据从而实现设备数据的上报与控制</li><li><strong>网易云信</strong> ：其核心也是MQTT来实现消息推送的</li></ul><p>还有更多的使用例子：<a href="https://github.com/mqtt/mqtt.github.io/wiki/Example-Uses" target="_blank" rel="noopener">https://github.com/mqtt/mqtt.github.io/wiki/Example-Uses</a></p><h2 id="MQTT是怎么工作的"><a href="#MQTT是怎么工作的" class="headerlink" title="MQTT是怎么工作的"></a>MQTT是怎么工作的</h2><p>MQTT采用的是发布/订阅的方式通信，客户端（Client）发布消息，经由代理（Broker）转发给订阅者（也是客户端）。</p><p><img src="https://cdn.nlark.com/yuque/0/2018/png/164396/1535701989397-7972015f-ed6d-4184-8d8d-69926e743f72.png" alt="发布/订阅模式"></p><blockquote><p>村民：狼来了，就喊救命，我来赶跑它。<br>小男孩：知道了<br>狼来了。<br>小男孩：狼来了！狼来了！救命啊！<br>村民过来把狼赶跑了。</p></blockquote><p>订阅者（村民）通过主题（狼来了）向代理（小男孩）订阅消息，当发布者（狼）发布该主题的消息（狼来了）时，代理就将消息转发给此消息主题的订阅者（小男孩通知村民），订阅者就可以做出响应（把狼赶跑了）。订阅者和发布者都属于客户端，可以是一个设备或者一个应用程序。每个客户端都拥有唯一的ClientID。</p><p>MQTT底层采用的是TCP/IP实现，提供三种服务质量（QoS）：</p><ul><li><strong>至多一次</strong> ：消息发布成功与否完全依赖底层网络，消息可能会丢失。适用于要求不高的数据。</li><li><strong>至少一次</strong> ：消息会确保到达，但是可能会重复。</li><li><strong>只有一次</strong> ：消息确保到达一次，可用于数据要求比较高的环境，如计费系统。</li></ul><h2 id="MQTT的一些术语"><a href="#MQTT的一些术语" class="headerlink" title="MQTT的一些术语"></a>MQTT的一些术语</h2><p><strong>客户端 Client</strong><br>使用MQTT的程序或设备。客户端总是通过网络连接到服务端。它可以</p><ul><li>发布应用消息给其它相关的客户端。</li><li>订阅以请求接受相关的应用消息。</li><li>取消订阅以移除接受应用消息的请求。</li><li>从服务端断开连接。</li></ul><p><strong>服务端 Server</strong><br>一个程序或设备，作为发送消息的客户端和请求订阅的客户端之间的中介。服务端</p><ul><li>接受来自客户端的网络连接。</li><li>接受客户端发布的应用消息。</li><li>处理客户端的订阅和取消订阅请求。</li><li>转发应用消息给符合条件的已订阅客户端。</li></ul><p><strong>订阅 Subscription</strong><br>订阅包含一个主题过滤器（Topic Filter）和一个最大的服务质量（QoS）等级。订阅与单个会话（Session）关联。会话可以包含多于一个的订阅。会话的每个订阅都有一个不同的主题过滤器。</p><p><strong>主题名 Topic Name</strong><br>附加在应用消息上的一个标签，服务端已知且与订阅匹配。服务端发送应用消息的一个副本给每一个匹配的客户端订阅。</p><p><strong>主题过滤器 Topic Filter</strong><br>订阅中包含的一个表达式，用于表示相关的一个或多个主题。主题过滤器可以使用通配符。</p><p><strong>会话 Session</strong><br>客户端和服务端之间的状态交互。一些会话持续时长与网络连接一样，另一些可以在客户端和服务端的多个连续网络连接间扩展。</p><p><strong>控制报文 MQTT Control Packet</strong><br>通过网络连接发送的信息数据包。MQTT规范定义了十四种不同类型的控制报文，其中一个（PUBLISH报文）用于传输应用消息。</p><h2 id="MQTT的怎么用？"><a href="#MQTT的怎么用？" class="headerlink" title="MQTT的怎么用？"></a>MQTT的怎么用？</h2><p>首先，你要有个服务器，然后在服务器上部署MQTT环境，具体方法这里就不展开讲了。<br>只想试试就不用自己部署服务器了，有很多服务器提供免费测试使用，<a href="https://github.com/mqtt/mqtt.github.io/wiki/public_brokers" target="_blank" rel="noopener">public_brokers</a>。<br>示例Android工程在这里：<a href="https://github.com/bytehala/android-mqtt-quickstart" target="_blank" rel="noopener">https://github.com/bytehala/android-mqtt-quickstart</a><br>MQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：</p><ul><li>Connect。等待与服务器建立连接。</li><li>Disconnect。等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。</li><li>Subscribe。等待完成订阅。</li><li>UnSubscribe。等待服务器取消客户端的一个或多个topics订阅。</li><li>Publish。MQTT客户端发送消息请求，发送完成后返回应用程序线程。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/aimsupport/entry/what_is_mqtt_and_how_does_it_work_with_websphere_mq?lang=en" target="_blank" rel="noopener">What is mqtt？</a></p><p><a href="https://github.com/mqtt/mqtt.github.io/wiki" target="_blank" rel="noopener">MQTT wiki</a></p><p><a href="https://mcxiaoke.gitbooks.io/mqtt-cn/content/mqtt/01-Introduction.html" target="_blank" rel="noopener">MQTT协议中文版</a></p>]]></content>
      
      <categories>
          
          <category> mqtt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown使用介绍</title>
      <link href="/2018/08/13/markdown-introduction/"/>
      <url>/2018/08/13/markdown-introduction/</url>
      <content type="html"><![CDATA[<h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>Markdown是一种轻量级的标记语言，目标是实现易读易写。</p><p>简单的语法规则，漂亮的显示效果，容易读写随意改，是Markdown的特点。使用Markdown写作，能让您专注于内容，不需要浪费大量时间去排版。很多博客、在线笔记等工具都支持Markdown格式的文档，例如GitHub、Stack Overflow、简书、为知笔记。</p><p>下面会介绍常用的Markdown语法。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown中标题分为六级，在行首以 # 开头并空一格再写标题文字。# 的个数标题的级数，一级标题字体最大，六级标题字体最小。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure></p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落没有标记，段落的前后应该有一个以上空行。段落不推荐使用缩进。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接标记是一个中括号和一个小括号连在一块，中括号内是要链接的文字，小括号是链接地址，例如<a href="#">这样</a>。链接可以是绝对地址，也可以是相对地址。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com/</span>)</span><br></pre></td></tr></table></figure></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>插入图片需要先保存好图片，然后再通过引入图片的方式显示。</p><p>图片的标记是一个感叹号、中括号和小括号连在一起，中括号里是图片加载不出来时显示的文字，小括号里是图片的链接地址。</p><p>下面这张图片的写法是：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Markdown图标</span>](<span class="link">https://d33wubrfki0l68.cloudfront.net/f1f475a6fda1c2c4be4cac04033db5c3293032b4/513a4/assets/images/markdown-mark-white.svg</span>)</span><br></pre></td></tr></table></figure></p><p><img src="https://d33wubrfki0l68.cloudfront.net/f1f475a6fda1c2c4be4cac04033db5c3293032b4/513a4/assets/images/markdown-mark-white.svg" alt="Markdown图标"></p><h3 id="段内代码"><a href="#段内代码" class="headerlink" title="段内代码"></a>段内代码</h3><p>段内代码标记是由两个 ` 符号（键盘上制表符上面，1旁边的按键）组成，两个`中间是要显示的代码，例如这样 <code>Hello world!</code>。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`Hello world!`</span><br></pre></td></tr></table></figure></p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块是在开头和结尾都以三个连续的 ` 符号组成，中间为显示的代码。怎么没有行号？那是Markdown解析后前端显示的问题，不是语法的问题。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">text</span> = <span class="string">"Hello world!"</span>;</span><br><span class="line">System.out.<span class="built_in">print</span>(<span class="built_in">text</span>);</span><br></pre></td></tr></table></figure></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在段落的开头使用 &gt; 符号即可，显示的效果如下：</p><blockquote><p>这是一段引用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 这是一段引用</span></span><br></pre></td></tr></table></figure><h3 id="无序序列"><a href="#无序序列" class="headerlink" title="无序序列"></a>无序序列</h3><p>无序序列在行开头使用 * 或者 - 或者 + 即可。显示效果如下</p><ul><li>无序序列</li></ul><ul><li>无序序列</li></ul><ul><li>无序序列</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>无序序列</span><br><span class="line"><span class="bullet">- </span>无序序列</span><br><span class="line"><span class="bullet">+ </span>无序序列</span><br></pre></td></tr></table></figure><h3 id="有序序列"><a href="#有序序列" class="headerlink" title="有序序列"></a>有序序列</h3><p>有序列表则使用数字接着一个英文句点，数字的大小顺序对显示的结果没有影响，显示结果会按照行的顺序重新编号。</p><ol><li>有序序列1</li><li>有序序列2</li><li>有序序列3</li></ol><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有序序列<span class="number">1</span></span><br><span class="line"><span class="number">1.</span> 有序序列<span class="number">2</span></span><br><span class="line"><span class="number">1.</span> 有序序列<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是用符号 | 标记，在 | 之间的就是表格的内容。第一行是表头，第二行是控制表格显示方式，第三行以后是表格内容。</p><table><thead><tr><th style="text-align:left">靠左显示</th><th style="text-align:center">居中显示</th><th style="text-align:right">靠右显示</th></tr></thead><tbody><tr><td style="text-align:left">第二行使用符号 :-</td><td style="text-align:center">第二行使用符号 :-:</td><td style="text-align:right">第二行使用符号 -:</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">靠左显示</span>|<span class="string">居中显示</span>|<span class="string">靠右显示</span>|</span><br><span class="line">|<span class="string">:-</span>|<span class="string">:-:</span>|<span class="string">-:</span>|</span><br><span class="line">|<span class="string">第二行使用符号 :-</span>|<span class="string">第二行使用符号 :-:</span>|<span class="string">第二行使用符号 -:</span>|</span><br></pre></td></tr></table></figure><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>强调是在段内的 * 之间插入要强调的文字，一个*是斜体，连续两个 **是加粗，例如 <em>我想倾斜一下</em>， <strong>我想加粗一下</strong>。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">*我想倾斜一下*</span></span><br><span class="line">*<span class="strong">*我想加粗一下*</span><span class="strong">*</span></span><br></pre></td></tr></table></figure><h2 id="Markdown工具推荐"><a href="#Markdown工具推荐" class="headerlink" title="Markdown工具推荐"></a>Markdown工具推荐</h2><p>Markdown 语法已经足够简单了，使用常用的文本编辑器就能完成写作。随着 Markdown 越来越流行，配套工具也丰富了起来，语法高亮、实时预览、图片粘贴等功能也很吸引人。</p><p>这里推荐一款文本编辑器 Atom，它着丰富的插件库，在 Atom 的 File -&gt; settings -&gt; install中搜索相应插件然后安装即可，使用方法在搜索结果界面点进去都有介绍。 Markdown 相关的插件有以下这些：</p><ul><li>markdown-writer：语法高亮</li><li>markdown-scroll-sync：编写的时候按了 Ctrl + Shift + M，之后能同步滚动预览</li><li>markdown-image-assistant：截图之后直接按 Ctrl + V 粘贴</li></ul><p>其他工具可以看一下<a href="https://www.jeffdesign.net/blog/90/" target="_blank" rel="noopener">Markdown 在线编辑阅读器及应用收集</a>。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.markdown.cn/" target="_blank" rel="noopener">Markdown 教程</a></p>]]></content>
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建过程</title>
      <link href="/2018/08/09/build-blog/"/>
      <url>/2018/08/09/build-blog/</url>
      <content type="html"><![CDATA[<p>记录一下博客网站的搭建过程，使用 Github 提供的 GitHub Pages + Hexo 实现。GitHub Pages 是 GitHub 提供的静态网页服务，文件存储在 GitHub 仓库中，可以结合 Jekyll、Hexo 等博客框架，快速的部署博客网站，同时还可以绑定个人域名，成为你的专属网站。Hexo 是一个快速、简洁且高效的博客框架，文档清晰，插件、主题丰富，使用 Makedown 解析文章，生成静态网页。使用 GitHub Pages + Hexo 即可快速部署漂亮的博客，让您专注博客内容。</p><p>博客的搭建过程参考了官方教程和一些网上的教程，“不重复造轮子”，我不再详细描写具体的配置过程，而是直接贴出教程的链接，方便查阅。</p><p>搭建过程主要以下几个步骤：</p><ul><li>建立 GitHub Pages 仓库</li><li>安装、部署 Hexo</li><li>配置主题</li><li>安装插件</li><li>编写博客</li></ul><p>在贴出的教程链接中，会有交叉的地方，请注意辨别。</p><h2 id="建立GitHub-Pages仓库"><a href="#建立GitHub-Pages仓库" class="headerlink" title="建立GitHub Pages仓库"></a>建立GitHub Pages仓库</h2><p>建立 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 仓库，首先要有 GitHub 账号，然后在 GitHub 上建立一个命名为 [你GitHub用户名].github.io的仓库。需要注意的是，仓库的命名必须为你GitHub的用户名，否则将不生效，就不能通过 <code>https://[你GitHub用户名].github.io</code> 来访问。</p><p>官方教程点击<a href="https://pages.github.com/" target="_blank" rel="noopener">这里</a>。</p><p>建好仓库之后，在仓库里面上传一个 <code>index.html</code> 文件，然后通过 <code>https://[你GitHub用户名].github.io</code> 来访问，可以看到<code>index.html</code>的内容，就说明已经建立好。上传后直接访问可能会出现404，等几分钟就好了。确认仓库已经建好，用来测试的 <code>index.html</code> 文件就可以删除了。</p><p>在搭建博客、编写博客的过程中，基本都用不上 Git 命令，但博客是基于 GitHub 的仓库实现的，还是推荐了解一下 Git 命令，方便解决各种问题。这里推荐一个简单清晰的git教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰Git教程</a>。</p><h2 id="安装、部署Hexo"><a href="#安装、部署Hexo" class="headerlink" title="安装、部署Hexo"></a>安装、部署Hexo</h2><p>Hexo 是基于 node.js 实现的，所以需要在自己电脑上安装 node.js，Hexo 没有可视化界面，需要使用命令行来完成各种功能，为了便于使用命令行，所以还要安装 Fit Bash。有了 node.js 和 Git Bash 之后，就可以愉快的在上面敲命令行安装、部署 Hexo 了。</p><p>安装的方法官方教程里都有，点击<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">这里</a>，官方教程比较全面，也会比较繁琐。</p><p>还有一个比较简单的教程，点击<a href="http://visugar.com/2017/05/04/20170504SetUpHexoBlog/" target="_blank" rel="noopener">这里</a>，里面还会教你怎么新建 GitHub 仓库，可以直接跳过，使用上面建好的就可以了。</p><p>到这里，部署 Hexo，并发布到 GitHub 仓库之后，博客就已经搭建完了。</p><p>不过，你可能还不太满意，界面不漂亮、没有站内搜索、没有RSS…</p><p>界面不漂亮？换个主题吧。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>好看的主题都在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>，点击进去预览，然后根据主题的配置方法配置即可。</p><p>我使用的主题是 <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>，大道至简，里面有详细的配置方法，按需配置即可。</p><p>本地配置好之后，使用 Hexo 发布命令 <code>hexo deploy</code>，就可以在 <code>https://[你GitHub用户名].github.io</code> 上看到效果。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>想要站内搜索，推荐这个插件：<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p><p>想要RSS，推荐这个插件：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></p><p>还想安装其他的？都在<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">这里</a>。</p><p>漂亮的博客网站已经建好了，开始书写内容吧。</p><h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>Hexo 是将 Markdown 文件解析为静态网页，所以博客也需要使用 Markdown 格式书写。Markdown 的目标是实现「易读易写」，所以使用起来很简单，这里是<a href="http://www.markdown.cn/" target="_blank" rel="noopener">官方教程</a>。</p><p>Markdown 的编辑器有很多，我使用的是 Atom，加上下面这些插件，即可方便的书写博客。</p><ul><li>markdown-writer：高亮显 示Markdown</li><li>markdown-scroll-sync：编写的时候按了 <code>Ctrl + Shift + M</code>，之后能同步滚动预览</li><li>markdown-image-assistant：截图之后直接按 <code>Ctrl + V</code> 粘贴</li></ul><p>在 Atom 的 <code>File</code> -&gt; <code>settings</code> -&gt; <code>install</code>中搜索相应插件然后安装即可，使用方法在搜索结果界面点进去都有介绍。</p><p>好了，专注内容吧。</p>]]></content>
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter之HTTP请求</title>
      <link href="/2018/08/06/flutter-http/"/>
      <url>/2018/08/06/flutter-http/</url>
      <content type="html"><![CDATA[<p>APP开发或多或少都要用到http网络请求，在Flutter中http请求的使用方式非常简单，只需在引入http库，设置url等必要参数后，调用<code>http.get()</code>或者<code>http.post()</code>方法即可。</p><h2 id="Get方式请求"><a href="#Get方式请求" class="headerlink" title="Get方式请求"></a>Get方式请求</h2><p>首先需要在 pubspec.yaml 中添加依赖：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dependencies</span>:</span><br><span class="line">  ...</span><br><span class="line">  <span class="attribute">http</span>: <span class="string">'&gt;=0.11.3+16'</span></span><br></pre></td></tr></table></figure><p>然后调用http.get()方法即可：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:http/http.dart'</span> <span class="keyword">as</span> http;</span><br><span class="line">[...]</span><br><span class="line">  loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> dataURL = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">    http.Response response = <span class="keyword">await</span> http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"response body : <span class="subst">$&#123;response.body&#125;</span>"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置http请求头 header：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">  Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">  http.Response response = await http.<span class="built_in">get</span>(dataUrl, headers: <span class="built_in">map</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求成功后刷新界面：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line">  Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">  <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">  http.Response response = await http.<span class="built_in">get</span>(dataUrl, headers: <span class="built_in">map</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//解析数据</span></span><br><span class="line">  BookResponse baseResponse = <span class="keyword">new</span> BookResponse(response.body);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通知界面更新状态，刷新界面</span></span><br><span class="line">  setState(() &#123;</span><br><span class="line">      _books = baseResponse.data;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Post方式请求"><a href="#Post方式请求" class="headerlink" title="Post方式请求"></a>Post方式请求</h2><p>将get方式中的http.get() 方法改为 http.post() 方法，并添加参数body即可：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _postData(Book book) async &#123;</span><br><span class="line">    <span class="keyword">String</span> dataUrl = <span class="string">"https://api.bmob.cn/1/classes/book/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"Content-Type"</span>] = <span class="string">"application/json"</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"X-Bmob-Application-Id"</span>] = <span class="string">"ce30565639d0fb10cd925b5b024c3408"</span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"X-Bmob-REST-API-Key"</span>] = <span class="string">"4057ff07b1bec5590fb4ff0a16141938"</span>;</span><br><span class="line">    <span class="built_in">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Post方式</span></span><br><span class="line">      http.Response response = await http.post(dataUrl, headers: <span class="built_in">map</span>, body: json.encode(book));</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"$&#123;response.body&#125;"</span>);</span><br><span class="line">    &#125; on Exception <span class="built_in">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">"exception $e"</span>);</span><br><span class="line">      SnackBar mSnackBar = <span class="keyword">new</span> SnackBar(content: <span class="keyword">new</span> Text(<span class="string">"上传数据错误"</span>));</span><br><span class="line">      Scaffold.of(context).showSnackBar(mSnackBar);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多用法参考<a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noopener">官方示例</a></p>]]></content>
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter之扫盲篇</title>
      <link href="/2018/08/06/flutter-introduction/"/>
      <url>/2018/08/06/flutter-introduction/</url>
      <content type="html"><![CDATA[<h2 id="什么是Flutter"><a href="#什么是Flutter" class="headerlink" title="什么是Flutter"></a>什么是Flutter</h2><p>Flutter是Google推出的跨平台SDK，同一份代码即可在Android和IOS系统上运行，使用Dart作为开发语言。2018年6月Flutter发布了首个预览版，到目前为止正式版本还未发布。Flutter是在GitHub上开源，SDK代码和相关支持库也在不断更新中，可以持续关注。</p><p>官方简介：</p><blockquote><p>Flutter 是 Google 用以帮助开发者在 iOS 和 Android 两个平台开发高质量原生 UI 的移动 SDK。Flutter 兼容现有的代码，免费且开源，在全球开发者中广泛被使用。</p></blockquote><p>Flutter拥有以下特点：</p><blockquote><ul><li><strong>快速开发</strong>：Flutter的热重载可以快速地进行测试、构建UI、添加功能并更快地修复错误。</li><li><strong>富有表现力，漂亮的用户界面</strong>：自带的Material Design和Cupertino（iOS风格）widget、丰富的motion API、平滑而自然的滑动效果。</li><li><strong>响应式框架</strong>：使用Flutter的现代、响应式框架，和一系列基础widget，轻松构建您的用户界面。</li><li><strong>访问本地功能和SDK</strong>：Flutter可以复用现有的Java、Swift或ObjC代码，访问iOS和Android上的原生系统功能和系统SDK。</li><li><strong>统一的应用开发体验</strong>：Flutter拥有丰富的工具和库，可以帮助开发者轻松地同时在iOS和Android系统中实现想法和创意。</li><li><strong>原生性能</strong>：Flutter包含了许多核心的widget，如滚动、导航、图标和字体等，这些都可以在iOS和Android上达到原生应用一样的性能。</li></ul></blockquote><h2 id="Flutter和React-Native有什么区别？"><a href="#Flutter和React-Native有什么区别？" class="headerlink" title="Flutter和React Native有什么区别？"></a>Flutter和React Native有什么区别？</h2><p>React Native (简称RN)是Facebook于2015年4月开源的跨平台移动应用开发框架，目前支持iOS和安卓两大平台，使用JavaScript语言开发。相较于Flutter，RN发展更早，使用的人数更多，第三方库也更加丰富。但是在使用RN时，需要编写一些桥接代码，不能完全实现跨平台。加上Facebook使用的开源许可证可能带来的法律风险，AirBnb、阿里巴巴和百度等大公司也相继宣布不再采用RN。</p><p>Flutter在跨平台方面做得会更加彻底，例如RN的UI组件最终都会转化为原生UI组件，而Flutter是自己实现，直接丢弃了原生UI组件，因此在各个平台上的表现一致性更高。Flutter在调用系统服务时，仍然需要根据平台配置，也不能完全做到平台无关。目前和RN相比较，Flutter并没有太大优势，不过Flutter还很年轻，Google与及广大开发者一起不断的维护和更新中。有消息称，Flutter作为Google开发的全新系统Fuchsia的开发框架，未来可期。</p><p>Flutter和RN的对比图：<br><img src="https://www.mindinventory.com/blog/wp-content/uploads/2018/05/flutter-react-native-comparison.jpg" alt=""></p><h2 id="Flutter怎么用？"><a href="#Flutter怎么用？" class="headerlink" title="Flutter怎么用？"></a>Flutter怎么用？</h2><p>Flutter官网文档很全面，从入门到精通看 <a href="https://flutter.io/" target="_blank" rel="noopener">这里</a> 就够了。</p><h3 id="Flutter初体验"><a href="#Flutter初体验" class="headerlink" title="Flutter初体验"></a>Flutter初体验</h3><ol><li>安装环境</li></ol><p>在Android Studio中安装插件<code>Flutter</code>和<code>Dart</code>，安装完成后重启Android Studio即可使用Flutter。<br><img src="images/beb787b6-5aa1-4083-8da0-68fe95091b09.png" alt=""></p><ol start="2"><li>创建Flutter工程并运行</li></ol><p>创建Flutter工程与创建Android工程方式一样，选择<code>File &gt;New Flutter Project</code>，按照指引创建，运行则点击运行图标。<br><img src="images/2ee80568-b9de-421e-a613-0c31c285d28d.png" alt=""></p><ol start="3"><li>Flutter热重载</li></ol><p>修改代码后保存即可在手机上看到修改后的效果。<br><img src="https://flutter.io/images/intellij/hot-reload.gif" alt="Flutter热重载"></p><h3 id="Flutter组件简介"><a href="#Flutter组件简介" class="headerlink" title="Flutter组件简介"></a>Flutter组件简介</h3><p>一切皆组件。</p><p>组件(Widget)是构建Flutter UI的基础。在Flutter中，组件是响应式的，描述了当前状态下该界面显示位置和内容，当组件的状态发生变化时会重建(rebuild)。组件分为有状态组件(StatefulWidget)和无状态组件(StatelessWidget)。有状态组件是指有可能会发生变化的组件，例如显示的内容、位置发生变化。无状态组件是指显示之后就不会发生变化。</p><p>Flutter 版Hello World：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  runApp(</span><br><span class="line">    <span class="keyword">new</span> Center(</span><br><span class="line">      child: <span class="keyword">new</span> Text(</span><br><span class="line">        <span class="string">'Hello, world!'</span>,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Flutter 应用最小的代码结构，<code>runApp()</code>是Flutter应用的入口，需要传入一个组件。<code>Center</code>和<code>Text</code>都是一个组件，描述了界面显示的位置和内容。</p><p>Flutter 版计数器：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="keyword">new</span> <span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">'Flutter</span> <span class="type">Demo</span>',</span><br><span class="line">      theme: <span class="keyword">new</span> <span class="type">ThemeData</span>(</span><br><span class="line">        primarySwatch: <span class="type">Colors</span>.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> <span class="type">MyHomePage</span>(title: <span class="symbol">'Flutter</span> <span class="type">Demo</span> <span class="type">Home</span> <span class="type">Page</span>'),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有状态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="type">MyHomePage</span>(&#123;<span class="type">Key</span> key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; <span class="keyword">new</span> _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> </span>&#123;</span><br><span class="line">  int _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  void _incrementCounter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新组件状态，刷新界面</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="keyword">new</span> <span class="type">AppBar</span>(</span><br><span class="line">        title: <span class="keyword">new</span> <span class="type">Text</span>(widget.title),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//界面内容</span></span><br><span class="line">      body: <span class="keyword">new</span> <span class="type">Center</span>(</span><br><span class="line">        child: <span class="keyword">new</span> <span class="type">Column</span>(</span><br><span class="line">          mainAxisAlignment: <span class="type">MainAxisAlignment</span>.center,</span><br><span class="line">          children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">            <span class="keyword">new</span> <span class="type">Text</span>(</span><br><span class="line">              <span class="symbol">'You</span> have pushed the button <span class="keyword">this</span> many times:',</span><br><span class="line">            ),</span><br><span class="line"></span><br><span class="line">            <span class="comment">//显示当前计数器的值</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">Text</span>(</span><br><span class="line">              '$_counter',</span><br><span class="line">              style: <span class="type">Theme</span>.of(context).textTheme.display1,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      <span class="comment">//点击浮动按钮递增</span></span><br><span class="line">      floatingActionButton: <span class="keyword">new</span> <span class="type">FloatingActionButton</span>(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="symbol">'Incremen</span>t',</span><br><span class="line">        child: <span class="keyword">new</span> <span class="type">Icon</span>(<span class="type">Icons</span>.add),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码中的<code>MyHomePage</code>是有状态的组件，会动态刷新页面中间的数字。点击一次浮动按钮<code>floatingActionButton</code>时，会触发<code>onPressed</code>事件执行<code>_incrementCounter</code>方法，在<code>_incrementCounter</code>方法中，计数器加1，并调用有状态组件的<code>setState</code>方法，刷新组件显示的内容。</p><p>运行的截图如下：</p><p><img src="images/6eded676-e66c-4d13-a8d6-a523915d257d.jpg" alt=""></p><h3 id="Flutter与Android原生开发的区别？"><a href="#Flutter与Android原生开发的区别？" class="headerlink" title="Flutter与Android原生开发的区别？"></a>Flutter与Android原生开发的区别？</h3><p>本节主要参考官方文档<a href="https://flutter.io/flutter-for-android/" target="_blank" rel="noopener">Flutter for Android Developers</a></p><p>1.Flutter中有<code>View</code>吗？</p><p>在Android里，<code>View</code>是屏幕上显示的基础，Flutter与之类似的是组件<code>widget</code>。在Flutter中没有XML的布局文件，而是在代码中编写组件树<code>widget tree</code>来完成界面布局。当界面中显示的内容有变化时，通过更新有状态组件<code>StatefulWidget</code>的<code>State</code>来刷新界面。</p><p>2.Activity 和 Fragment 呢？</p><p>一切皆组件，Activity和Fragment在Flutter里面也属于组件<code>widget</code>的范畴。组件的生命周期里有初始化、状态改变、销毁这三种状态。<br><img src="https://segmentfault.com/img/bVbbYQc?w=499&amp;h=712" alt=""></p><p>在Flutter中弱化了生命周期的概念，<a href="https://flutter.io/flutter-for-android/#how-do-i-listen-to-android-activity-lifecycle-events" target="_blank" rel="noopener">文档</a>中写道：</p><blockquote><p>If you need to observe the lifecycle to acquire or release any native resources, you should likely be doing it from the native side, at any rate.</p></blockquote><p>3.没有Activity，怎么跳转页面？</p><p>Flutter 没有 <code>Intent</code>,可以通过<code>Navigator</code>和<code>Route</code>来实现页面间的跳转。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  runApp(<span class="keyword">new</span> MaterialApp(</span><br><span class="line">    home: <span class="keyword">new</span> MyAppHome(), <span class="regexp">//</span> becomes the route named <span class="string">'/'</span></span><br><span class="line">    routes: &lt;String, WidgetBuilder&gt; &#123;</span><br><span class="line">      <span class="string">'/a'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page A'</span>),</span><br><span class="line">      <span class="string">'/b'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page B'</span>),</span><br><span class="line">      <span class="string">'/c'</span>: <span class="function"><span class="params">(BuildContext context)</span> =&gt;</span> <span class="keyword">new</span> MyPage(title: <span class="string">'page C'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>跳转页面</span><br><span class="line">Navigator.<span class="keyword">of</span>(context).pushNamed(<span class="string">'/b'</span>);</span><br></pre></td></tr></table></figure></p><p>4.怎么使用相机、GPS之类的功能？</p><p>使用Flutter插件(plugins)，也就是通过第三方库来使用这些功能。Flutter的第三方库都可以在<a href="https://pub.dartlang.org/packages" target="_blank" rel="noopener">这里</a>搜索。</p><p>5.怎么切换主线程和后台线程？</p><p>Flutter默认在主线程上运行，访问网络等需要异步线程的，则使用<code>async</code>和<code>await</code>,例如下面这个请求网络并刷新界面的例子：<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loadData() async &#123;</span><br><span class="line">  <span class="built_in">String</span> dataURL = <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>;</span><br><span class="line">  http.<span class="built_in">Response</span> <span class="built_in">response</span> = await http.<span class="keyword">get</span>(dataURL);</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    widgets = json.decode(<span class="built_in">response</span>.body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.mindinventory.com/blog/flutter-vs-react-native/" target="_blank" rel="noopener">Flutter Vs. React Native: Let’s See Who the Winner is</a></p><p><a href="http://szuwest.github.io/flutterkuang-jia-yan-jiu-he-yu-rndui-bi.html" target="_blank" rel="noopener">Flutter框架研究和与RN对比</a></p><p><a href="https://juejin.im/post/5afd77466fb9a07aab2a12da" target="_blank" rel="noopener">Flutter - 不一样的跨平台解决方案</a></p><p><a href="https://flutter.io/technical-overview/#everythings-a-widget" target="_blank" rel="noopener">Flutter Technical Overview</a></p><p><a href="https://segmentfault.com/a/1190000015211309" target="_blank" rel="noopener">flutter中的生命周期</a></p>]]></content>
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
